import asyncio
import os
import re
import uuid
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from yt_dlp import YoutubeDL
from shazamio import Shazam
from pydub import AudioSegment

TOKEN = "7896639551:AAGkVQ6MvSd15bzAz-RHPZEAheJK4BxOmfo"
OWNER_USERNAME = "@Alavkhanovvv"

bot = Bot(token=TOKEN)
dp = Dispatcher()
shazam = Shazam()


def get_music_buttons(video_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéµ –°–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ –≤–∏–¥–µ–æ", callback_data=f"download_music:{video_id}")],
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é", callback_data=f"find_full_track:{video_id}")]
    ])
    return keyboard


@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok, Instagram –∏–ª–∏ YouTube.")


@dp.message(F.text)
async def download_video(message: Message):
    url = message.text.strip()
    if not re.match(r"https?://(www\.)?(youtube\.com|youtu\.be|tiktok\.com|instagram\.com)", url):
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ YouTube, TikTok –∏–ª–∏ Instagram.")
        return

    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
    video_id = str(uuid.uuid4())
    video_path = f"downloads/{video_id}.mp4"

    ydl_opts = {
        "format": "best",
        "quiet": True,
        "noplaylist": True,
        "outtmpl": video_path
    }

    try:
        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

        file = FSInputFile(video_path)
        await message.answer_video(file, caption=f"üé¨ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ!", reply_markup=get_music_buttons(video_id))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")


@dp.callback_query(F.data.startswith("download_music"))
async def download_music(callback: CallbackQuery):
    video_id = callback.data.split(":")[1]
    video_path = f"downloads/{video_id}.mp4"
    audio_path = f"downloads/{video_id}.mp3"

    if not os.path.exists(video_path):
        await callback.message.answer("‚ö† –ú—É–∑—ã–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –°–∫–∞—á–∞–π—Ç–µ –≤–∏–¥–µ–æ —Å–Ω–∞—á–∞–ª–∞.")
        return

    await callback.message.answer("üéµ –ò–∑–≤–ª–µ–∫–∞—é –º—É–∑—ã–∫—É...")
    try:
        audio = AudioSegment.from_file(video_path, format="mp4")
        audio.export(audio_path, format="mp3", bitrate="192k")
        file = FSInputFile(audio_path)
        await callback.message.answer_audio(file, caption="üé∂ –ú—É–∑—ã–∫–∞ –∏–∑ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏: {e}")


@dp.callback_query(F.data.startswith("find_full_track"))
async def find_full_track(callback: CallbackQuery):
    video_id = callback.data.split(":")[1]
    video_path = f"downloads/{video_id}.mp4"

    if not os.path.exists(video_path):
        await callback.message.answer("‚ö† –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
        return

    await callback.message.answer("üîç –û–ø—Ä–µ–¥–µ–ª—è—é —Ç—Ä–µ–∫...")
    try:
        song_data = await shazam.recognize_song(video_path)
        if song_data and "track" in song_data:
            track = song_data["track"]
            track_name = track.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            artist = track.get("subtitle", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            search_query = f"{artist} {track_name} audio"

            await callback.message.answer(f"üé∂ –¢—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω: {track_name} ‚Äì {artist}\nüîç –ò—â—É –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é...")

            music_path = f"downloads/{track_name}.mp3"
            ydl_opts = {
                "format": "bestaudio/best",
                "quiet": True,
                "noplaylist": True,
                "outtmpl": music_path
            }

            with YoutubeDL(ydl_opts) as ydl:
                ydl.download([f"ytsearch:{search_query}"])

            file = FSInputFile(music_path)
            await callback.message.answer_audio(file, caption=f"üé∂ –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: {track_name} ‚Äì {artist}")
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–∫.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏: {e}")


async def main():
    await dp.start_polling(bot)


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main())